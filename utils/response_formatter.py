from typing import Dict, Any
from datetime import datetime

class ResponseFormatter:
    
    @staticmethod
    def format_call_report(data: Dict[str, Any], period: str = "today") -> str:
        """Format b√°o c√°o cu·ªôc g·ªçi"""
        if period == "today":
            return f"""üìû **B√ÅO C√ÅO CU·ªòC G·ªåI H√îM NAY**
            
üî¢ T·ªïng cu·ªôc g·ªçi: {data['total_calls']}
‚úÖ Th√†nh c√¥ng: {data['successful_calls']}
‚ùå Th·∫•t b·∫°i: {data['failed_calls']}
‚è±Ô∏è Th·ªùi l∆∞·ª£ng TB: {data['avg_duration']}

_C·∫≠p nh·∫≠t l√∫c: {datetime.now().strftime('%H:%M %d/%m/%Y')}_"""
        
        elif period == "week":
            daily_str = "\n".join([f"  ‚Ä¢ {day['date']}: {day['calls']} cu·ªôc g·ªçi" 
                                  for day in data['daily_breakdown']])
            return f"""üìä **B√ÅO C√ÅO TU·∫¶N**
            
üî¢ T·ªïng cu·ªôc g·ªçi: {data['total_calls']}
‚úÖ Th√†nh c√¥ng: {data['successful_calls']}
‚ùå Th·∫•t b·∫°i: {data['failed_calls']}

üìà **Chi ti·∫øt theo ng√†y:**
{daily_str}

_C·∫≠p nh·∫≠t l√∫c: {datetime.now().strftime('%H:%M %d/%m/%Y')}_"""
        
        elif period == "month":
            return f"""üìà **B√ÅO C√ÅO TH√ÅNG**
            
üî¢ T·ªïng cu·ªôc g·ªçi: {data['total_calls']}
üìä TƒÉng tr∆∞·ªüng: {data['growth_rate']}
üïí Gi·ªù cao ƒëi·ªÉm: {data['busiest_hour']}

_C·∫≠p nh·∫≠t l√∫c: {datetime.now().strftime('%H:%M %d/%m/%Y')}_"""
    
    @staticmethod
    def format_system_status(data: Dict[str, Any]) -> str:
        """Format tr·∫°ng th√°i h·ªá th·ªëng"""
        status_emoji = {
            "Ho·∫°t ƒë·ªông t·ªët": "üü¢",
            "C·∫£nh b√°o": "üü°", 
            "B·∫£o tr√¨": "üî¥"
        }
        
        emoji = status_emoji.get(data['overall_status'], "‚ö™")
        
        return f"""üñ•Ô∏è **TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG**

{emoji} T√¨nh tr·∫°ng: {data['overall_status']}
‚è≥ Uptime: {data['uptime']}
üîÑ Kh·ªüi ƒë·ªông l·∫ßn cu·ªëi: {data['last_restart']}
üìû ƒê∆∞·ªùng d√¢y ho·∫°t ƒë·ªông: {data['active_lines']}/10
‚è∞ H√†ng ƒë·ª£i: {data['queue_length']} cu·ªôc g·ªçi

_Ki·ªÉm tra l√∫c: {datetime.now().strftime('%H:%M %d/%m/%Y')}_"""
    
    @staticmethod
    def format_phone_config(data: Dict[str, Any]) -> str:
        """Format c·∫•u h√¨nh s·ªë ƒëi·ªán tho·∫°i"""
        numbers_str = "\n".join([f"  ‚Ä¢ {num}" for num in data['configured_numbers']])
        
        return f"""üì± **C·∫§U H√åNH S·ªê ƒêI·ªÜN THO·∫†I**

üìã **S·ªë ƒë√£ c·∫•u h√¨nh:**
{numbers_str}

üìä T·ªïng ƒë∆∞·ªùng d√¢y: {data['total_lines']}
üü¢ ƒêang ho·∫°t ƒë·ªông: {data['active_lines']}
üïí Thay ƒë·ªïi cu·ªëi: {data['last_config_change']}

_C·∫≠p nh·∫≠t l√∫c: {datetime.now().strftime('%H:%M %d/%m/%Y')}_"""
    
    @staticmethod
    def format_config_result(result: Dict[str, Any]) -> str:
        """Format k·∫øt qu·∫£ c·∫•u h√¨nh"""
        if result['success']:
            config = result['new_config']
            return f"""‚úÖ **C·∫§U H√åNH TH√ÄNH C√îNG**

üì± S·ªë ƒëi·ªán tho·∫°i: {config['phone']}
üîÑ Tr·∫°ng th√°i: {config['status']}
üïí Th·ªùi gian: {config['configured_at']}

S·ªë ƒëi·ªán tho·∫°i ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng! üéâ"""
        else:
            return f"""‚ùå **C·∫§U H√åNH TH·∫§T B·∫†I**

üì± S·ªë: {result.get('phone', 'N/A')}
üí¨ L·ªói: {result['message']}
üîß M√£ l·ªói: {result.get('error', 'UNKNOWN')}

Vui l√≤ng th·ª≠ l·∫°i sau! üîÑ"""
    
    @staticmethod
    def format_unknown_command() -> str:
        """Format cho l·ªánh kh√¥ng hi·ªÉu"""
        return """‚ùì **L·ªÜNH KH√îNG ƒê∆Ø·ª¢C NH·∫¨N DI·ªÜN**

C√°c l·ªánh c√≥ s·∫µn:
‚Ä¢ `b√°o c√°o cu·ªôc g·ªçi h√¥m nay`
‚Ä¢ `th·ªëng k√™ tu·∫ßn n√†y` 
‚Ä¢ `b√°o c√°o th√°ng`
‚Ä¢ `ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng`
‚Ä¢ `danh s√°ch s·ªë ƒëi·ªán tho·∫°i`
‚Ä¢ `c·∫•u h√¨nh s·ªë [s·ªë_ƒëi·ªán_tho·∫°i]`

V√≠ d·ª•: `@BotBiva b√°o c√°o cu·ªôc g·ªçi h√¥m nay` ü§ñ"""